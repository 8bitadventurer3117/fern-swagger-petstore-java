/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.bitadventurer.api.types;

import com.bitadventurer.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Order.Builder.class)
public final class Order {
    private final Optional<Long> id;

    private final Optional<Long> petId;

    private final Optional<Integer> quantity;

    private final Optional<OffsetDateTime> shipDate;

    private final Optional<OrderStatus> status;

    private final Optional<Boolean> complete;

    private final Map<String, Object> additionalProperties;

    private Order(
            Optional<Long> id,
            Optional<Long> petId,
            Optional<Integer> quantity,
            Optional<OffsetDateTime> shipDate,
            Optional<OrderStatus> status,
            Optional<Boolean> complete,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.petId = petId;
        this.quantity = quantity;
        this.shipDate = shipDate;
        this.status = status;
        this.complete = complete;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public Optional<Long> getId() {
        return id;
    }

    @JsonProperty("petId")
    public Optional<Long> getPetId() {
        return petId;
    }

    @JsonProperty("quantity")
    public Optional<Integer> getQuantity() {
        return quantity;
    }

    @JsonProperty("shipDate")
    public Optional<OffsetDateTime> getShipDate() {
        return shipDate;
    }

    /**
     * @return Order Status
     */
    @JsonProperty("status")
    public Optional<OrderStatus> getStatus() {
        return status;
    }

    @JsonProperty("complete")
    public Optional<Boolean> getComplete() {
        return complete;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Order && equalTo((Order) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Order other) {
        return id.equals(other.id)
                && petId.equals(other.petId)
                && quantity.equals(other.quantity)
                && shipDate.equals(other.shipDate)
                && status.equals(other.status)
                && complete.equals(other.complete);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.petId, this.quantity, this.shipDate, this.status, this.complete);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Long> id = Optional.empty();

        private Optional<Long> petId = Optional.empty();

        private Optional<Integer> quantity = Optional.empty();

        private Optional<OffsetDateTime> shipDate = Optional.empty();

        private Optional<OrderStatus> status = Optional.empty();

        private Optional<Boolean> complete = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Order other) {
            id(other.getId());
            petId(other.getPetId());
            quantity(other.getQuantity());
            shipDate(other.getShipDate());
            status(other.getStatus());
            complete(other.getComplete());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<Long> id) {
            this.id = id;
            return this;
        }

        public Builder id(Long id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "petId", nulls = Nulls.SKIP)
        public Builder petId(Optional<Long> petId) {
            this.petId = petId;
            return this;
        }

        public Builder petId(Long petId) {
            this.petId = Optional.ofNullable(petId);
            return this;
        }

        @JsonSetter(value = "quantity", nulls = Nulls.SKIP)
        public Builder quantity(Optional<Integer> quantity) {
            this.quantity = quantity;
            return this;
        }

        public Builder quantity(Integer quantity) {
            this.quantity = Optional.ofNullable(quantity);
            return this;
        }

        @JsonSetter(value = "shipDate", nulls = Nulls.SKIP)
        public Builder shipDate(Optional<OffsetDateTime> shipDate) {
            this.shipDate = shipDate;
            return this;
        }

        public Builder shipDate(OffsetDateTime shipDate) {
            this.shipDate = Optional.ofNullable(shipDate);
            return this;
        }

        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<OrderStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(OrderStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        @JsonSetter(value = "complete", nulls = Nulls.SKIP)
        public Builder complete(Optional<Boolean> complete) {
            this.complete = complete;
            return this;
        }

        public Builder complete(Boolean complete) {
            this.complete = Optional.ofNullable(complete);
            return this;
        }

        public Order build() {
            return new Order(id, petId, quantity, shipDate, status, complete, additionalProperties);
        }
    }
}
