/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.bitadventurer.api.types;

import com.bitadventurer.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = User.Builder.class)
public final class User {
    private final Optional<Long> id;

    private final Optional<String> username;

    private final Optional<String> firstName;

    private final Optional<String> lastName;

    private final Optional<String> email;

    private final Optional<String> password;

    private final Optional<String> phone;

    private final Optional<Integer> userStatus;

    private final Map<String, Object> additionalProperties;

    private User(
            Optional<Long> id,
            Optional<String> username,
            Optional<String> firstName,
            Optional<String> lastName,
            Optional<String> email,
            Optional<String> password,
            Optional<String> phone,
            Optional<Integer> userStatus,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.username = username;
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
        this.password = password;
        this.phone = phone;
        this.userStatus = userStatus;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public Optional<Long> getId() {
        return id;
    }

    @JsonProperty("username")
    public Optional<String> getUsername() {
        return username;
    }

    @JsonProperty("firstName")
    public Optional<String> getFirstName() {
        return firstName;
    }

    @JsonProperty("lastName")
    public Optional<String> getLastName() {
        return lastName;
    }

    @JsonProperty("email")
    public Optional<String> getEmail() {
        return email;
    }

    @JsonProperty("password")
    public Optional<String> getPassword() {
        return password;
    }

    @JsonProperty("phone")
    public Optional<String> getPhone() {
        return phone;
    }

    /**
     * @return User Status
     */
    @JsonProperty("userStatus")
    public Optional<Integer> getUserStatus() {
        return userStatus;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof User && equalTo((User) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(User other) {
        return id.equals(other.id)
                && username.equals(other.username)
                && firstName.equals(other.firstName)
                && lastName.equals(other.lastName)
                && email.equals(other.email)
                && password.equals(other.password)
                && phone.equals(other.phone)
                && userStatus.equals(other.userStatus);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.username,
                this.firstName,
                this.lastName,
                this.email,
                this.password,
                this.phone,
                this.userStatus);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Long> id = Optional.empty();

        private Optional<String> username = Optional.empty();

        private Optional<String> firstName = Optional.empty();

        private Optional<String> lastName = Optional.empty();

        private Optional<String> email = Optional.empty();

        private Optional<String> password = Optional.empty();

        private Optional<String> phone = Optional.empty();

        private Optional<Integer> userStatus = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(User other) {
            id(other.getId());
            username(other.getUsername());
            firstName(other.getFirstName());
            lastName(other.getLastName());
            email(other.getEmail());
            password(other.getPassword());
            phone(other.getPhone());
            userStatus(other.getUserStatus());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<Long> id) {
            this.id = id;
            return this;
        }

        public Builder id(Long id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "username", nulls = Nulls.SKIP)
        public Builder username(Optional<String> username) {
            this.username = username;
            return this;
        }

        public Builder username(String username) {
            this.username = Optional.ofNullable(username);
            return this;
        }

        @JsonSetter(value = "firstName", nulls = Nulls.SKIP)
        public Builder firstName(Optional<String> firstName) {
            this.firstName = firstName;
            return this;
        }

        public Builder firstName(String firstName) {
            this.firstName = Optional.ofNullable(firstName);
            return this;
        }

        @JsonSetter(value = "lastName", nulls = Nulls.SKIP)
        public Builder lastName(Optional<String> lastName) {
            this.lastName = lastName;
            return this;
        }

        public Builder lastName(String lastName) {
            this.lastName = Optional.ofNullable(lastName);
            return this;
        }

        @JsonSetter(value = "email", nulls = Nulls.SKIP)
        public Builder email(Optional<String> email) {
            this.email = email;
            return this;
        }

        public Builder email(String email) {
            this.email = Optional.ofNullable(email);
            return this;
        }

        @JsonSetter(value = "password", nulls = Nulls.SKIP)
        public Builder password(Optional<String> password) {
            this.password = password;
            return this;
        }

        public Builder password(String password) {
            this.password = Optional.ofNullable(password);
            return this;
        }

        @JsonSetter(value = "phone", nulls = Nulls.SKIP)
        public Builder phone(Optional<String> phone) {
            this.phone = phone;
            return this;
        }

        public Builder phone(String phone) {
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        @JsonSetter(value = "userStatus", nulls = Nulls.SKIP)
        public Builder userStatus(Optional<Integer> userStatus) {
            this.userStatus = userStatus;
            return this;
        }

        public Builder userStatus(Integer userStatus) {
            this.userStatus = Optional.ofNullable(userStatus);
            return this;
        }

        public User build() {
            return new User(
                    id, username, firstName, lastName, email, password, phone, userStatus, additionalProperties);
        }
    }
}
