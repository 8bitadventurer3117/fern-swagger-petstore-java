/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.bitadventurer.api.types;

import com.bitadventurer.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Address.Builder.class)
public final class Address {
    private final Optional<String> street;

    private final Optional<String> city;

    private final Optional<String> state;

    private final Optional<String> zip;

    private final Map<String, Object> additionalProperties;

    private Address(
            Optional<String> street,
            Optional<String> city,
            Optional<String> state,
            Optional<String> zip,
            Map<String, Object> additionalProperties) {
        this.street = street;
        this.city = city;
        this.state = state;
        this.zip = zip;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("street")
    public Optional<String> getStreet() {
        return street;
    }

    @JsonProperty("city")
    public Optional<String> getCity() {
        return city;
    }

    @JsonProperty("state")
    public Optional<String> getState() {
        return state;
    }

    @JsonProperty("zip")
    public Optional<String> getZip() {
        return zip;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Address && equalTo((Address) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Address other) {
        return street.equals(other.street)
                && city.equals(other.city)
                && state.equals(other.state)
                && zip.equals(other.zip);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.street, this.city, this.state, this.zip);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> street = Optional.empty();

        private Optional<String> city = Optional.empty();

        private Optional<String> state = Optional.empty();

        private Optional<String> zip = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Address other) {
            street(other.getStreet());
            city(other.getCity());
            state(other.getState());
            zip(other.getZip());
            return this;
        }

        @JsonSetter(value = "street", nulls = Nulls.SKIP)
        public Builder street(Optional<String> street) {
            this.street = street;
            return this;
        }

        public Builder street(String street) {
            this.street = Optional.ofNullable(street);
            return this;
        }

        @JsonSetter(value = "city", nulls = Nulls.SKIP)
        public Builder city(Optional<String> city) {
            this.city = city;
            return this;
        }

        public Builder city(String city) {
            this.city = Optional.ofNullable(city);
            return this;
        }

        @JsonSetter(value = "state", nulls = Nulls.SKIP)
        public Builder state(Optional<String> state) {
            this.state = state;
            return this;
        }

        public Builder state(String state) {
            this.state = Optional.ofNullable(state);
            return this;
        }

        @JsonSetter(value = "zip", nulls = Nulls.SKIP)
        public Builder zip(Optional<String> zip) {
            this.zip = zip;
            return this;
        }

        public Builder zip(String zip) {
            this.zip = Optional.ofNullable(zip);
            return this;
        }

        public Address build() {
            return new Address(street, city, state, zip, additionalProperties);
        }
    }
}
