/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.bitadventurer.api.types;

import com.bitadventurer.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Pet.Builder.class)
public final class Pet {
    private final Optional<Long> id;

    private final String name;

    private final Optional<Category> category;

    private final List<String> photoUrls;

    private final Optional<List<Tag>> tags;

    private final Optional<PetStatus> status;

    private final Map<String, Object> additionalProperties;

    private Pet(
            Optional<Long> id,
            String name,
            Optional<Category> category,
            List<String> photoUrls,
            Optional<List<Tag>> tags,
            Optional<PetStatus> status,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.name = name;
        this.category = category;
        this.photoUrls = photoUrls;
        this.tags = tags;
        this.status = status;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public Optional<Long> getId() {
        return id;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    @JsonProperty("category")
    public Optional<Category> getCategory() {
        return category;
    }

    @JsonProperty("photoUrls")
    public List<String> getPhotoUrls() {
        return photoUrls;
    }

    @JsonProperty("tags")
    public Optional<List<Tag>> getTags() {
        return tags;
    }

    /**
     * @return pet status in the store
     */
    @JsonProperty("status")
    public Optional<PetStatus> getStatus() {
        return status;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Pet && equalTo((Pet) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Pet other) {
        return id.equals(other.id)
                && name.equals(other.name)
                && category.equals(other.category)
                && photoUrls.equals(other.photoUrls)
                && tags.equals(other.tags)
                && status.equals(other.status);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.name, this.category, this.photoUrls, this.tags, this.status);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        _FinalStage name(@NotNull String name);

        Builder from(Pet other);
    }

    public interface _FinalStage {
        Pet build();

        _FinalStage id(Optional<Long> id);

        _FinalStage id(Long id);

        _FinalStage category(Optional<Category> category);

        _FinalStage category(Category category);

        _FinalStage photoUrls(List<String> photoUrls);

        _FinalStage addPhotoUrls(String photoUrls);

        _FinalStage addAllPhotoUrls(List<String> photoUrls);

        _FinalStage tags(Optional<List<Tag>> tags);

        _FinalStage tags(List<Tag> tags);

        _FinalStage status(Optional<PetStatus> status);

        _FinalStage status(PetStatus status);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, _FinalStage {
        private String name;

        private Optional<PetStatus> status = Optional.empty();

        private Optional<List<Tag>> tags = Optional.empty();

        private List<String> photoUrls = new ArrayList<>();

        private Optional<Category> category = Optional.empty();

        private Optional<Long> id = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Pet other) {
            id(other.getId());
            name(other.getName());
            category(other.getCategory());
            photoUrls(other.getPhotoUrls());
            tags(other.getTags());
            status(other.getStatus());
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public _FinalStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>pet status in the store</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage status(PetStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public _FinalStage status(Optional<PetStatus> status) {
            this.status = status;
            return this;
        }

        @java.lang.Override
        public _FinalStage tags(List<Tag> tags) {
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "tags", nulls = Nulls.SKIP)
        public _FinalStage tags(Optional<List<Tag>> tags) {
            this.tags = tags;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllPhotoUrls(List<String> photoUrls) {
            this.photoUrls.addAll(photoUrls);
            return this;
        }

        @java.lang.Override
        public _FinalStage addPhotoUrls(String photoUrls) {
            this.photoUrls.add(photoUrls);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "photoUrls", nulls = Nulls.SKIP)
        public _FinalStage photoUrls(List<String> photoUrls) {
            this.photoUrls.clear();
            this.photoUrls.addAll(photoUrls);
            return this;
        }

        @java.lang.Override
        public _FinalStage category(Category category) {
            this.category = Optional.ofNullable(category);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "category", nulls = Nulls.SKIP)
        public _FinalStage category(Optional<Category> category) {
            this.category = category;
            return this;
        }

        @java.lang.Override
        public _FinalStage id(Long id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public _FinalStage id(Optional<Long> id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        public Pet build() {
            return new Pet(id, name, category, photoUrls, tags, status, additionalProperties);
        }
    }
}
